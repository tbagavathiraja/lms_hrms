const responseConstant = require("../constants/response_constant");
const apiResponseConstant = require("../constants/api_response_constant");

const errorMessage  = {};
errorMessage[responseConstant.HTTP_UNAUTHORIZED] = "Unauthorized access";
errorMessage[responseConstant.HTTP_FORBIDDEN] = "Unauthorized access";
errorMessage[responseConstant.HTTP_NOT_IMPLEMENTED] = "Invalid request";
errorMessage[responseConstant.HTTP_NOT_FOUND] = "Page not found";
errorMessage[responseConstant.HTTP_METHOD_NOT_ALLOWED] = "Method not allowed";
errorMessage[apiResponseConstant.UNAUTHORIZED_ACCESS] = "Unauthorized access";
errorMessage[apiResponseConstant.ROLE_NOT_AUTHORIZED] = "Unauthorized access";
errorMessage[apiResponseConstant.CONTEXT_NOT_AUTHORIZED] = "Unauthorized access";
errorMessage[apiResponseConstant.UNKNOWN_ERROR_OCCURRED] = "Unable to process the request";
errorMessage[apiResponseConstant.INVALID_JSON_REQUEST] = "Unable to parse json content";
errorMessage[apiResponseConstant.VALIDATION_FAILED] = "Validation error";
errorMessage[apiResponseConstant.MISSING_REQUIRED_PARAMETERS ] = "Required parameter(s) missing";
errorMessage[apiResponseConstant.INVALID_VALUES_IN_PARAMETERS] = "Invalid parameter value";
errorMessage[apiResponseConstant.MAX_LENGTH_EXCEEDED] = "Parameter(s) maximum characters length exceeded";
errorMessage[apiResponseConstant.MIN_LENGTH_NOT_REACHED] = "Parameter(s) minimum characters length required";
errorMessage[apiResponseConstant.USER_IN_USE] = "User in use";
errorMessage[apiResponseConstant.USER_NOT_EXIST] = "Invalid credentials";
errorMessage[apiResponseConstant.USER_ALREADY_EXIST] = "User already exists";
errorMessage[apiResponseConstant.USER_EMAIL_ADDRESS_ALREADY_EXISTS] = "User email already exists";
errorMessage[apiResponseConstant.USER_NUMBER_ALREADY_EXISTS] = "Employee number already exists";
errorMessage[apiResponseConstant.INVALID_CREDENTIALS] = "Invalid credentials";
errorMessage[apiResponseConstant.USER_ROLE_IN_USE] = "User role in use";
errorMessage[apiResponseConstant.USER_ROLE_NOT_EXIST] = "User role not exist";
errorMessage[apiResponseConstant.USER_ROLE_ALREADY_EXIST] = "User role already exist";
errorMessage[apiResponseConstant.RESOURCE_NOT_EXIST] = "Resource not exist";
errorMessage[apiResponseConstant.RESOURCE_IN_USE] = "Resource in use";
errorMessage[apiResponseConstant.RESOURCE_ALREADY_EXIST] = "Resource already exist";
errorMessage[apiResponseConstant.RESOURCE_REQUIRED] = "Resource required";
errorMessage[apiResponseConstant.OFFICE_IN_USE] = "Office in use";
errorMessage[apiResponseConstant.OFFICE_NOT_EXIST] = "Office not exist";
errorMessage[apiResponseConstant.OFFICE_ALREADY_EXIST] = "Office already exist";
errorMessage[apiResponseConstant.TENANT_NOT_EXIST] = "Tenant not exist";
errorMessage[apiResponseConstant.INVALID_TENANT] = "Invalid tenant";
errorMessage[apiResponseConstant.TENANT_ALREADY_EXIST] = "Tenant already exist";
errorMessage[apiResponseConstant.NO_RECORDS_FOUND] = "No records found";
errorMessage[apiResponseConstant.PERIOD_ALREADY_EXIST] = "Assessment Period already exists";
errorMessage[apiResponseConstant.PERIOD_IN_USE] = "Assessment Period in use.Cannot delete";
errorMessage[apiResponseConstant.RESOURCE_REQUEST_IN_USE] = "Request cannot be deleted.";
errorMessage[apiResponseConstant.RECORDS_NOT_SAVED] = "Records not saved";
errorMessage[apiResponseConstant.PARAMETER_IN_USE] = "Parameter name already exists";




module.exports.errorMessage =errorMessage;

const errorCodeMapping = {};
errorCodeMapping[responseConstant.HTTP_UNAUTHORIZED] = responseConstant.HTTP_UNAUTHORIZED;
errorCodeMapping[responseConstant.HTTP_FORBIDDEN] = responseConstant.HTTP_FORBIDDEN;
errorCodeMapping[responseConstant.HTTP_NOT_IMPLEMENTED] = responseConstant.HTTP_NOT_IMPLEMENTED;
errorCodeMapping[responseConstant.HTTP_NOT_FOUND] = responseConstant.HTTP_NOT_FOUND;
errorCodeMapping[responseConstant.HTTP_METHOD_NOT_ALLOWED] =responseConstant.HTTP_METHOD_NOT_ALLOWED;
errorCodeMapping[apiResponseConstant.UNAUTHORIZED_ACCESS] =responseConstant.HTTP_UNAUTHORIZED;
errorCodeMapping[apiResponseConstant.ROLE_NOT_AUTHORIZED] = responseConstant.HTTP_METHOD_NOT_ALLOWED;
errorCodeMapping[apiResponseConstant.CONTEXT_NOT_AUTHORIZED] = responseConstant.HTTP_METHOD_NOT_ALLOWED;
errorCodeMapping[apiResponseConstant.UNKNOWN_ERROR_OCCURRED] = responseConstant.HTTP_INTERNAL_SERVER_ERROR;
errorCodeMapping[apiResponseConstant.INVALID_JSON_REQUEST] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.VALIDATION_FAILED] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.MISSING_REQUIRED_PARAMETERS ] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.INVALID_VALUES_IN_PARAMETERS] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.MAX_LENGTH_EXCEEDED] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.MIN_LENGTH_NOT_REACHED] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.USER_IN_USE] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.USER_NOT_EXIST] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.USER_ALREADY_EXIST] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.USER_EMAIL_ADDRESS_ALREADY_EXISTS] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.PARAMETER_IN_USE] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.USER_NUMBER_ALREADY_EXISTS] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.INVALID_CREDENTIALS] = responseConstant.HTTP_UNAUTHORIZED;
errorCodeMapping[apiResponseConstant.USER_ROLE_IN_USE] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.USER_ROLE_NOT_EXIST] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.USER_ROLE_ALREADY_EXIST] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.RESOURCE_NOT_EXIST] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.RESOURCE_IN_USE] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.RESOURCE_ALREADY_EXIST] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.RESOURCE_REQUIRED] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.OFFICE_IN_USE] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.OFFICE_NOT_EXIST] = responseConstant.HTTP_BAD_REQUEST;
errorCodeMapping[apiResponseConstant.OFFICE_ALREADY_EXIST] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.TENANT_NOT_EXIST] = responseConstant.HTTP_BAD_REQUEST
errorCodeMapping[apiResponseConstant.INVALID_TENANT] = responseConstant.HTTP_BAD_REQUEST
errorCodeMapping[apiResponseConstant.TENANT_ALREADY_EXIST] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.TENANT_IN_USE] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.PERIOD_ALREADY_EXIST] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.PERIOD_IN_USE] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.RESOURCE_REQUEST_IN_USE] = responseConstant.HTTP_CONFLICT;
errorCodeMapping[apiResponseConstant.RECORDS_NOT_SAVED] = responseConstant.HTTP_NOT_MODIFIED;
module.exports.errorCodeMapping =errorCodeMapping;